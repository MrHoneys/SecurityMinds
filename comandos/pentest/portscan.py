import discord
from discord.ext import commands
import socket
import asyncio

class PortScan(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def cog_check(self, ctx):  # Verificação de canal
        allowed_channel_id = 1184437080550543410  # ID do canal permitido
        if ctx.channel.id != allowed_channel_id:
            await ctx.send("Proibido usar esse comando neste chat. Utilize esse comando no canal específico.")
            return False
        return True

    @commands.command()
    async def port(self, ctx):
        ask_ip_message = await ctx.send("Por gentileza, envie-me o IP que você deseja scanear.")

        def check(msg):
            return msg.author == ctx.author and msg.channel == ctx.channel

        try:
            ip_message = await self.bot.wait_for('message', timeout=60.0, check=check)
            target_ip = ip_message.content.strip()

            await ip_message.delete()
            await ask_ip_message.delete()
            await ctx.message.delete()  # Apaga a mensagem do comando

            scanning_message = await ctx.send(f"{ctx.author.mention}, aguarde, estamos escaneando...")

            port_list = {
                'Gerenciamento Remoto': [5900, 5901, 5902, 22, 3389, 8080],
                'Serviços Vulneráveis': [1433, 1723, 3306, 5432, 6667],
                'Serviços Essenciais': [25, 80, 443, 110, 143, 53, 4433]
            }

            results = {}
            for category, ports in port_list.items():
                results[category] = []
                for port in ports:
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.settimeout(1)
                    result = sock.connect_ex((target_ip, port))
                    if result == 0:
                        results[category].append(f'- Porta {port}: ABERTA')
                    else:
                        results[category].append(f'- Porta {port}: FECHADA')
                    sock.close()

            embed = discord.Embed(title="Resultados do Scan de Portas", color=0x00ff00)
            embed.set_author(name="Bot de Scan", icon_url="https://i.imgur.com/8v1aZmp.png")
            embed.add_field(name="IP Escaneado", value=target_ip, inline=False)

            for category, ports in results.items():
                ports_str = '\n'.join(ports)
                embed.add_field(name=category, value=ports_str, inline=False)

            embed.set_image(url="https://images-ext-1.discordapp.net/external/BkYJCJry3a7xpZZrxoeNrWWUTu-tjSnsZum8abSFpf0/https/boletimsec.com.br/wp-content/uploads/2023/12/Grupo-Lazarus-utiliza-exploits-Log4j-para-lancar-novos-RATs-em-campanha-global-min-1024x576.png?format=webp&quality=lossless")

            # Enviar mensagem privada com os resultados do scan
            result_message = await ctx.author.send(embed=embed)
            await scanning_message.delete()  # Apaga a mensagem de escaneamento no canal público

            # Mensagem no chat original orientando para verificar o privado
            await ctx.send(f"{ctx.author.mention}, por gentileza, verifique a sua caixa de entrada privada para os resultados.", delete_after=10)

        except asyncio.TimeoutError:
            await ctx.send('Tempo esgotado. Por favor, tente novamente.', delete_after=10)

def setup(bot):
    bot.add_cog(PortScan(bot))
